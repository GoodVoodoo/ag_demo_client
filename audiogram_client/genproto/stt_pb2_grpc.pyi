"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
from . import stt_pb2
import typing
_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):
    ...

class STTStub:

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None:
        ...
    FileRecognize: grpc.UnaryUnaryMultiCallable[stt_pb2.FileRecognizeRequest, stt_pb2.FileRecognizeResponse]
    Recognize: grpc.StreamStreamMultiCallable[stt_pb2.RecognizeRequest, stt_pb2.RecognizeResponse]
    GetModelsInfo: grpc.UnaryUnaryMultiCallable[google.protobuf.empty_pb2.Empty, stt_pb2.ModelsInfo]
    'rpc LongRunningRecognize(LongRunningRecognizeRequest) returns (mts.ai.audiogram.v1.Task);'

class STTAsyncStub:
    FileRecognize: grpc.aio.UnaryUnaryMultiCallable[stt_pb2.FileRecognizeRequest, stt_pb2.FileRecognizeResponse]
    Recognize: grpc.aio.StreamStreamMultiCallable[stt_pb2.RecognizeRequest, stt_pb2.RecognizeResponse]
    GetModelsInfo: grpc.aio.UnaryUnaryMultiCallable[google.protobuf.empty_pb2.Empty, stt_pb2.ModelsInfo]
    'rpc LongRunningRecognize(LongRunningRecognizeRequest) returns (mts.ai.audiogram.v1.Task);'

class STTServicer(metaclass=abc.ABCMeta):

    @abc.abstractmethod
    def FileRecognize(self, request: stt_pb2.FileRecognizeRequest, context: _ServicerContext) -> typing.Union[stt_pb2.FileRecognizeResponse, collections.abc.Awaitable[stt_pb2.FileRecognizeResponse]]:
        ...

    @abc.abstractmethod
    def Recognize(self, request_iterator: _MaybeAsyncIterator[stt_pb2.RecognizeRequest], context: _ServicerContext) -> typing.Union[collections.abc.Iterator[stt_pb2.RecognizeResponse], collections.abc.AsyncIterator[stt_pb2.RecognizeResponse]]:
        ...

    @abc.abstractmethod
    def GetModelsInfo(self, request: google.protobuf.empty_pb2.Empty, context: _ServicerContext) -> typing.Union[stt_pb2.ModelsInfo, collections.abc.Awaitable[stt_pb2.ModelsInfo]]:
        """rpc LongRunningRecognize(LongRunningRecognizeRequest) returns (mts.ai.audiogram.v1.Task);"""

def add_STTServicer_to_server(servicer: STTServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None:
    ...